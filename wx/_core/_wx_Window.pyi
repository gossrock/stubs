from typing import overload, Any, Tuple, Optional, List

from . import EvtHandler
from . import ID_ANY
from . import Point, DefaultPosition
from . import Size, DefaultSize
from . import WindowBase
from . import Orientation, BOTH
from . import UpdateUIEvent
from . import AcceleratorTable
from . import Colour
from . import BackgroundStyle
from . import Border
from . import Caret
from . import WindowVariant, WINDOW_VARIANT_NORMAL
from . import VisualAttributes
from . import Rect
from . import LayoutConstraints
from . import Sizer
from . import Cursor
from . import DropTarget
from . import Font

PanelNameStr: str
class Window(WindowBase):
    @overload
    def __init__ (self) -> None: ...
    @overload
    def __init__ (self, parent: Window, id: int = ID_ANY,
                        pos: Point = DefaultPosition, size: Size = DefaultSize,
                        style: int = 0, name: str = PanelNameStr) -> None : ...
    def  AcceptsFocus(self) -> bool: ...
    def AcceptsFocusFromKeyboard(self) -> bool: ...
    def AcceptsFocusRecursively(self) -> bool: ...
    def AddChild(self, child: WindowBase) -> None: ...
    def AdjustForLayoutDirection(self, x: int, width: int, widthTotal: int) -> int: ...# documentation says return type is wx.Coord. experimentation produces an int
    def AlwaysShowScrollbars(self, hflag: bool = True, vflag: bool = True) -> None: ...
    def AssociateHandle(self, handle: Any) -> None: ... #not sure yet what a "handle" is
    def BeginRepositioningChildren(self) -> bool: ...
    def CacheBestSize(self, size: Size) -> None: ...
    def CanAcceptFocus(self) -> bool: ...
    def CanAcceptFocusFromKeyboard(self) -> bool: ...
    def CanScroll(self, orient: Orientation) -> bool: ...
    def CanSetTransparent(self) -> bool: ...
    def CaptureMouse(self) -> None: ...
    def Center(self, dir: Orientation = BOTH) -> None: ...
    def CenterOnParent(self, dir: Orientation = BOTH) -> None: ...
    def Centre(self, direction: Orientation = BOTH) -> None: ...
    def CentreOnParent(self, direction: Orientation = BOTH) -> None: ...
    def ClearBackground(self) -> None: ...
    @overload
    def ClientToScreen (self, x: int, y: int) -> Tuple[int, int]: ...
    @overload
    def ClientToScreen (self, pt: Point) -> Point: ...
    def ClientToWindowSize(self, size: Size) -> Size: ...
    def Close(self, force: bool = False) -> bool: ...
    @overload
    def ConvertDialogToPixels (self, pt: Point) -> Point: ...
    @overload
    def ConvertDialogToPixels (self, sz: Size) -> Size: ...
    @overload
    def ConvertPixelsToDialog (self, pt: Point) -> Point: ...
    @overload
    def ConvertPixelsToDialog (self, sz: Size) -> Size: ...
    def Create(self, parent: Window, id: int = ID_ANY, pos: Point = DefaultPosition,
                    size: Size = DefaultSize, style: int = 0, name: str = PanelNameStr) -> bool: ...
    #def  DLG_UNIT(self, dlg_unit) #?
    def Destroy(self) -> bool: ...
    def DestroyChildren(self) -> bool: ...
    def DestroyLater(self) -> None: ...
    def Disable(self) -> bool: ...
    def DissociateHandle(self) -> None: ...
    def DoGetBestClientSize(self) -> Size: ...
    def DoGetBestSize(self) -> Size: ...
    def DoUpdateWindowUI(self, event: UpdateUIEvent) -> None: ...
    def DragAcceptFiles(self, accept: bool) -> None: ...
    def Enable(self, enable: bool = True) -> bool: ...
    def EndRepositioningChildren(self) -> None: ...
    @staticmethod
    def FindFocus() -> Window: ...
    @overload
    def FindWindow (self, id: int) -> Window: ...
    @overload
    def FindWindow (self, name: str) -> Window: ...
    @staticmethod
    def FindWindowById(id: int, parent: Optional[Window] = None) -> Optional[Window]: ...
    @staticmethod
    def FindWindowByLabel(label: str, parent: Optional[Window] = None) -> Optional[Window]: ...
    @staticmethod
    def FindWindowByName(name: str, parent: Optional[Window] = None) -> Optional[Window]: ...
    def Fit(self) -> None: ...
    def FitInside(self) -> None: ...
    def Freeze(self) -> None: ...
    def GetAcceleratorTable(self) -> AcceleratorTable: ...
    def GetAutoLayout(self) -> bool: ...
    def GetBackgroundColour(self) -> Colour: ...
    def GetBackgroundStyle(self) -> BackgroundStyle: ...
    def GetBestHeight(self, width: int) -> int: ...
    def GetBestSize(self) -> Size: ...
    def GetBestVirtualSize(self) -> Size: ...
    def GetBestWidth(self, height: int) -> int: ...
    @overload
    def GetBorder (self) -> Border: ...
    @overload
    def GetBorder(self, flags: int) -> Border: ...
    @staticmethod
    def GetCapture() -> Window: ...
    def GetCaret(self) -> Caret: ...
    def GetCharHeight(self) -> int: ...
    def GetCharWidth(self) -> int: ...
    def GetChildren(self) -> List[Window]: ...
    @staticmethod
    def GetClassDefaultAttributes(variant: WindowVariant = WINDOW_VARIANT_NORMAL) -> VisualAttributes: ...
    def GetClientAreaOrigin(self) -> Point: ...
    def GetClientRect(self) -> Rect: ...
    def GetClientSize(self) -> Size: ...  # documentation doesn't specify the return type
    def GetConstraints(self) -> LayoutConstraints: ...
    def GetContainingSizer(self) -> Sizer: ...
    def GetCursor(self) -> Cursor: ...
    def GetDefaultAttributes(self) -> VisualAttributes: ...
    def GetDropTarget(self) -> DropTarget: ...
    def GetEffectiveMinSize(self) -> Size: ...
    def GetEventHandler(self) -> EvtHandler: ...
    def GetExtraStyle(self) -> int: ...
    def GetFont(self) -> Font: ...
    def GetForegroundColour(self) -> Colour: ...
    def GetGrandParent(self) -> Window: ...
    # GetGtkWidget(self)
    # GetHandle(self)
    def GetHelpText(self) -> str: ...
    #def GetHelpTextAtPoint(self, point: Point, origin: ) -> str: ...
